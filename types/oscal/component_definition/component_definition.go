// Code generated by go generate; DO NOT EDIT.
package component_definition

import (
	"github.com/docker/oscalkit/types/oscal/validation_root"

	"github.com/docker/oscalkit/types/oscal/validation_common_root"
)

// TBD
type ComponentDefinition struct {

	// Loads a component definition from another resource.
	ImportComponentDefinitions []ImportComponentDefinition `xml:"import-component-definition,omitempty" json:"import-component-definitions,omitempty"`
	// Provides information about the publication and availability of the containing document.
	Metadata *Metadata `xml:"metadata,omitempty" json:"metadata,omitempty"`
	// A defined component that can be part of an implemented system.
	Components []Component `xml:"component,omitempty" json:"components,omitempty"`
	// A grouping of other components and/or capabilities.
	Capabilities []Capability `xml:"capability,omitempty" json:"capabilities,omitempty"`
	// A collection of citations and resource references.
	BackMatter *BackMatter `xml:"back-matter,omitempty" json:"backMatter,omitempty"`
}

// A defined component that can be part of an implemented system.
type Component struct {

	// A unique identifier for a component.
	Id string `xml:"id,attr,omitempty" json:"id,omitempty"`
	// The component's short, human-readable name.
	Name string `xml:"name,attr,omitempty" json:"name,omitempty"`
	// A category describing the purpose of the component.
	ComponentType string `xml:"component-type,attr,omitempty" json:"componentType,omitempty"`

	// A longer name for the component.
	Title Title `xml:"title,omitempty" json:"title,omitempty"`
	// A description supporting the parent item.
	Description *Description `xml:"description,omitempty" json:"description,omitempty"`
	// A value with a name, attributed to the containing control, part, or group.
	Properties []Prop `xml:"prop,omitempty" json:"properties,omitempty"`
	// A reference to a local or remote resource
	Links []Link `xml:"link,omitempty" json:"links,omitempty"`
	// Additional commentary on the parent item.
	Remarks *Remarks `xml:"remarks,omitempty" json:"remarks,omitempty"`
	// Defines a role associated with a party or parties that has responsibility for the component.
	ResponsibleParties []ResponsibleParty `xml:"responsible-party,omitempty" json:"responsible-parties,omitempty"`
	// Defines how the component or capability supports a set of controls.
	ControlImplementations []ControlImplementation `xml:"control-implementation,omitempty" json:"control-implementations,omitempty"`
}

// A grouping of other components and/or capabilities.
type Capability struct {

	// A unique identifier for a capability.
	Id string `xml:"id,attr,omitempty" json:"id,omitempty"`
	// The capability's human-readable name.
	Name string `xml:"name,attr,omitempty" json:"name,omitempty"`

	// A description supporting the parent item.
	Description *Description `xml:"description,omitempty" json:"description,omitempty"`
	// A value with a name, attributed to the containing control, part, or group.
	Properties []Prop `xml:"prop,omitempty" json:"properties,omitempty"`
	// A reference to a local or remote resource
	Links []Link `xml:"link,omitempty" json:"links,omitempty"`
	// Additional commentary on the parent item.
	Remarks *Remarks `xml:"remarks,omitempty" json:"remarks,omitempty"`
	// TBD
	IncorporatesCapabilities []IncorporatesCapability `xml:"incorporates-capability,omitempty" json:"incorporates-capabilities,omitempty"`
	// TBD
	IncorporatesComponents []IncorporatesComponent `xml:"incorporates-component,omitempty" json:"incorporates-components,omitempty"`
	// Defines how the component or capability supports a set of controls.
	ControlImplementations []ControlImplementation `xml:"control-implementation,omitempty" json:"control-implementations,omitempty"`
}

// Defines how the component or capability supports a set of controls.
type ControlImplementation struct {

	// A description supporting the parent item.
	Description *Description `xml:"description,omitempty" json:"description,omitempty"`
	// Defines what sets of controls are supported by the component.
	CanMeetRequirementSets []CanMeetRequirementSet `xml:"can-meet-requirement-set,omitempty" json:"can-meet-requirement-sets,omitempty"`
}

// Defines what sets of controls are supported by the component.
type CanMeetRequirementSet struct {

	// A reference to an OSCAL catalog or profile providing the referenced control or subcontrol definition.
	Source string `xml:"source,attr,omitempty" json:"source,omitempty"`

	// A description supporting the parent item.
	Description *Description `xml:"description,omitempty" json:"description,omitempty"`
	// A value with a name, attributed to the containing control, part, or group.
	Properties []Prop `xml:"prop,omitempty" json:"properties,omitempty"`
	// A reference to a local or remote resource
	Links []Link `xml:"link,omitempty" json:"links,omitempty"`
	// Additional commentary on the parent item.
	Remarks *Remarks `xml:"remarks,omitempty" json:"remarks,omitempty"`
	// TBD
	ImplementedRequirements []ImplementedRequirement `xml:"implemented-requirement,omitempty" json:"implemented-requirements,omitempty"`
}

// TBD
type ImplementedRequirement struct {

	// A reference to a requirement defined on another requirement set that should be included here.
	RequirementId string `xml:"requirement-id,attr,omitempty" json:"requirementId,omitempty"`
	// Unique identifier of the containing object
	Id string `xml:"id,attr,omitempty" json:"id,omitempty"`
	// A reference to a control identifier.
	ControlId string `xml:"control-id,attr,omitempty" json:"controlId,omitempty"`

	// A description supporting the parent item.
	Description *Description `xml:"description,omitempty" json:"description,omitempty"`
	// A value with a name, attributed to the containing control, part, or group.
	Properties []Prop `xml:"prop,omitempty" json:"properties,omitempty"`
	// A reference to a local or remote resource
	Links []Link `xml:"link,omitempty" json:"links,omitempty"`
	// Additional commentary on the parent item.
	Remarks *Remarks `xml:"remarks,omitempty" json:"remarks,omitempty"`
	// Describes which specific statements are addressed by a requirement, by pointing to a specific requirement statement within a control.
	OnlyStatements []OnlyStatement `xml:"only-statement,omitempty" json:"only-statements,omitempty"`
}

// Loads a component definition from another resource.
type ImportComponentDefinition struct {
	// A link to a resource that defines a set of components and/or capabilities to import into this collection.
	Href  string `xml:"href,attr,omitempty" json:"href,omitempty"`
	Value string `xml:",chardata" json:"value,omitempty"`
}

type BackMatter = validation_root.BackMatter

type Description = validation_root.Description

type IncorporatesCapability = validation_common_root.IncorporatesCapability

type IncorporatesComponent = validation_common_root.IncorporatesComponent

type Link = validation_root.Link

type Metadata = validation_root.Metadata

type OnlyStatement = validation_common_root.OnlyStatement

type Prop = validation_root.Prop

type Remarks = validation_root.Remarks

type ResponsibleParty = validation_root.ResponsibleParty

type Title = validation_root.Title
